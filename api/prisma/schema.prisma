generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Billboard {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  label       String
  imageUrl    String
  destination String     @default("")
  isHomePage  Boolean    @default(false)
  category    Category[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  billboardId String?
  products    Product[]
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Billboard   Billboard? @relation(fields: [billboardId], references: [id])
}

model Product {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  stock                Int            @default(0)
  categoryId           String
  colors               String?
  collection           String?
  countryOfManufacture String?
  model                String?
  productWeight        Int?
  sizes                String[]
  brand                String?
  images               String[]
  orderItems           OrderItem[]
  name                 String
  description          String
  price                Int
  isFeatured           Boolean        @default(false)
  isArchived           Boolean        @default(false)
  isFlash              Boolean        @default(false)
  isMostPopular        Boolean        @default(false)
  isUnlimited          Boolean        @default(true)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  Category             Category       @relation(fields: [categoryId], references: [id])
  savedProduct         SavedProduct[]
  BasketItem           BasketItem[]
}

model SavedProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([productId])
}

model Basket {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  userId     String       @db.ObjectId
  user       User         @relation(fields: [userId], references: [id])
  items      BasketItem[]
  totalPrice Int          @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@unique([userId])
}

model BasketItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  basketId   String   @db.ObjectId
  productId  String   @db.ObjectId
  quantity   Int      @default(1)
  size       String?
  color      String?
  fit        String?
  price      Float
  totalPrice Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  basket     Basket   @relation(fields: [basketId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([basketId, productId, size])
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  orderItems OrderItem[]
  totalPrice Int         @default(0)
  userId     String?
  guestName  String?
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  status     Status      @default(waitingForPayment)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  city       String?
  User       User?       @relation(fields: [userId], references: [id])
}

model OrderItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String  @db.ObjectId
  quantity    Int     @default(1)
  productId   String
  productName String
  totalPrice  Float
  color       String  @default("")
  size        String  @default("")
  fit         String  @default("")
  Product     Product @relation(fields: [productId], references: [id])
  Order       Order   @relation(fields: [orderId], references: [id])
}

model productMaterial {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Weight {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  weight    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shipping {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Promo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     Int
  condition Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  username        String
  email           String         @unique
  orders          Order[]
  phone           String?
  avatar          String?
  address         String?
  role            Role           @default(USER)
  password        String
  balance         Int            @default(0)
  isVerified      Boolean        @default(false)
  isEmailVerified Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  savedProduct    SavedProduct[]
  baslet          Basket[]
  creditCard      CreditCard?
}

model CreditCard {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  cardNumber      String
  cardHolderName  String
  expirationMonth String
  expirationYear  String
  cvv             String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Status {
  waitingForPayment
  isPaid
  delivery
  inTheWay
  cancelled
}
